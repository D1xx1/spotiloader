"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ YouTube API –∫–ª—é—á–µ–π
"""

import time
from typing import List, Optional
from djspyt import keys

class YouTubeKeyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–æ—Ç–∞—Ü–∏–∏ YouTube API –∫–ª—é—á–µ–π"""
    
    def __init__(self):
        self.keys = keys.YOUTUBE_API_KEYS.copy()
        self.current_key_index = 0
        self.failed_keys = {}  # {key: timestamp} - –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        self.key_cooldown = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö - –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–ª—é—á–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        
    def get_current_key(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á"""
        if not self.keys:
            return None
        return self.keys[self.current_key_index]
    
    def mark_key_failed(self, failed_key: str, error_message: str = ""):
        """–ü–æ–º–µ—Ç–∏—Ç—å –∫–ª—é—á –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π"""
        self.failed_keys[failed_key] = {
            'timestamp': time.time(),
            'error': error_message
        }
        print(f"‚ùå –ö–ª—é—á API –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π: {failed_key[:10]}...")
        if error_message:
            print(f"   –û—à–∏–±–∫–∞: {error_message}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
        self._switch_to_next_key()
    
    def _switch_to_next_key(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á"""
        original_index = self.current_key_index
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–ª—é—á
        for attempt in range(len(self.keys)):
            self.current_key_index = (self.current_key_index + 1) % len(self.keys)
            current_key = self.keys[self.current_key_index]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–ª—é—á
            if current_key in self.failed_keys:
                failed_time = self.failed_keys[current_key]['timestamp']
                if time.time() - failed_time < self.key_cooldown:
                    continue  # –ö–ª—é—á –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                else:
                    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª—é—á
                    del self.failed_keys[current_key]
                    print(f"‚úÖ –ö–ª—é—á API —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {current_key[:10]}...")
            
            if self.current_key_index != original_index:
                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–ª—é—á API: {current_key[:10]}...")
            return
        
        # –ï—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        print("‚ùå –í—Å–µ –∫–ª—é—á–∏ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    def get_available_keys_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        available = 0
        for key in self.keys:
            if key not in self.failed_keys:
                available += 1
            elif time.time() - self.failed_keys[key]['timestamp'] >= self.key_cooldown:
                available += 1
        return available
    
    def get_status_info(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∫–ª—é—á–µ–π"""
        total_keys = len(self.keys)
        available_keys = self.get_available_keys_count()
        current_key = self.get_current_key()
        
        return {
            'total_keys': total_keys,
            'available_keys': available_keys,
            'current_key': current_key[:10] + "..." if current_key else None,
            'failed_keys': len(self.failed_keys)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
key_manager = YouTubeKeyManager()
